demo()
x (2,3,4)
ls
x c(2.4, 5.6)
x <- c(10.4, 5.6)
1/x
logx
log x
lnx
ln(x)
print (x)
y <- x^2
print (y)
mean (y)
var(y)
print(y)
ls (y)
print(y)
graph?
x vs y
graph
ls?
?
po
?
o
plot(x, y)
abline(lm(x,y))
abline(lm(x, y))
abline(x, y)
attach(mtcars)
title("This Won't Work")
quartz()
cars <-(1, 3, 6, 4, 9)
cars <- c(1, 3, 6, 4, 9)
plot(cars)
cars <- c(1,3,6,4,9)
plot(cars, type="o", col="blue")
title(main="Autos")
trucks <- c(2,5,4,5,12)
print(trucks)
lines(trucks, type="o", pch=22, lty=2, col="red")
load(".RData")
wik <- c(A unit hydrograph is used to more easily represent the effect of rainfall in a particular basin. It is a hypothetical unit response of the watershed to a unit input of rainfall. This allows easy calculation of the response to any arbitrary input (rainfall), by simply performing a convolution between the rain input and the unit hydrograph output.#
An instantaneous unit hydrograph is a further refinement of the concept; for an IUH, the input rainfall is assumed to all take place at a discrete point in time (obviously, this isn't the case for actual rainstorms). Making this assumption can greatly simplify the analysis involved in constructing a unit hydrograph, and it is )
print (wik)
wik <- c(lns)
wik <-c(1,2,5,6,4,,6,7,8,9)
wik <-c(1,2,3,4,5,6,7,8)
median (wik)
mode (wik)
mod (wi)
print (wik)
edit (wik)
print (wik)
edit (wik)
mode (wik)
print (wik)
pwd
ls
x c(1,2,3)
x <- c(1,2,3)
print (x)
mod (x)
mod (1)
modulus (1)
y=mod(x)
y=x^3
print (y)
ls
mkdir
help(solve)
objects(1,2,3,6)
x <- c(10.4, 5.6, 3.1, 6.4, 21.7)
print (x)
assign("x", c(10.4, 3.5))
print (x)
print(x)
1/x
print(x)
y=1/x
print(y)
log(y)
sqrt(y)
v<- 2y+18.4
v <- 2y+18.4
v <- 2*y+13.4
print(y)
y
mean(x)
mean(y)
sqrt(-17+0i)
sqrt(-17)
arse <- c(1.2.6.7.3.4.0)
arse <- c(1,2,3,8,9,7,4,5)
sort(arse)
mean(arse)
print(arse)
var(arse)
temp <- x > 13
print(temp)
print(x)
dorchart(arse)
dotchart(arse)
plot(x,arse)
plot(x, arse)
plot(xarse)
pairs(x)
pairs(X)
qqplot(x,arse)
dotchart(x,arse)
windows()
pdf()
dotchart(x,arse)
graphics.off()
graphics.on()
pdf()
x <- c(1,2,3)
print(x)
ls
cd
r
unix
.globalworkspace
r <- (6,7,8,9)
r <- (6, 7, 8, 9)
r
r <- c(6, 7)
r
plot r
plot
y <- c(8, 3, 9)
plot (x, y)
plot (r, y)
graph
e <- c(3, 7)
plot (r, e)
ls
2 + 3
exp(1)
sum(1:5)
prod(1:69)
ls
pwd
library(affy)
list.files()
cd Desktop
cd "Dekstop"
cd "desktop"
getwd()
wd
wd()
library(affy)#
library(pvclust)#
library(vsn)#
#
pd <- read.AnnotatedDataFrame(filename="pdata.txt")#
filenames <- rownames(pData(pd))#
affyData <- ReadAffy(filenames=filenames, phenoData=pd, sampleNames=pd$name)#
#
pdf("plot1.pdf",paper="a4r")#
#
boxplot(affyData, col=rainbow(6))#
#
hist(affyData, col=rainbow(6))#
#
degRNA <- AffyRNAdeg(affyData)#
plotAffyRNAdeg(degRNA, cols=rainbow(6))#
#
heatmap(cor(exprs(affyData)), symm=T)#
#
corClust <- pvclust(exprs(affyData), nboot=1, method.dist="correlation")#
plot(corClust)#
#
pca <- princomp(exprs(affyData))#
plot(pca$loadings, main="Principal Component Analysis", col=rainbow(6),  pch=19, cex=2)#
text(pca$loadings, colnames(exprs(affyData)), pos=3, cex=0.8)#
#
eset <- rma(affyData)#
normalize.AffyBatch.methods()#
#
par(mfrow=c(1,2))    # "Multi-figure by row" with 1 row and 2 columns#
#
boxplot(affyData,col=rainbow(6))#
#
boxplot(data.frame(exprs(eset)), col=rainbow(6))#
#
par(mfrow=c(1,1))#
#
par(mfrow=c(1,2))    # "Multi-figure by row" with 1 row and 2 columns#
#
corClust <- pvclust(exprs(affyData), nboot=1, method.dist="correlation")#
plot(corClust)#
#
corClustAfter <- pvclust(exprs(eset), nboot=1, method.dist="correlation")#
plot(corClustAfter)#
#
par(mfrow=c(1,1))#
#
meanSdPlot(exprs(eset))#
#
boxplot(data.frame(exprs(eset)), col="grey");#
#
#write.exprs(eset, file="normalised_expression.txt")#
#save(eset,file="eset.Rdata")#
#
dev.off()#
#
pdf("plot2.pdf",paper="a4r")#
#
types<-pData(pd)$genotype#
#
#types <- factor(c("KO","KO","KO","WT","WT","WT"))#
#design <- model.matrix(~ 0+types)#
#colnames(design) <- levels(types)#
#contrast.matrix <- makeContrasts(KO-WT, levels=design)#
#
design <- model.matrix(~ 0+types)#
contrast.matrix<-makeContrasts(typesMZD_i-typesMZD,levels=design)#
#
fit <- lmFit(exprs,design)#
fit2 <- contrasts.fit(fit,contrast.matrix)#
fit2 <- eBayes(fit2)#
#
library(zebrafish.db)#
zebrafish()#
#
probes <- fit2$genes$ID#
#
symbols <- mget(probes,zebrafishSYMBOL)#
entrezids <- mget(probes,zebrafishENTREZID)#
descriptions <- mget(probes,zebrafishGENENAME)#
#
fit2$genes$Symbol <- unlist(symbols)#
fit2$genes$EntrezID <- unlist(entrezids)#
fit2$genes$Description <- unlist(descriptions)#
#
topTable(fit2, number=20, sort.by="p")#
volcanoplot(fit2, highlight=20)#
#
genelist<- topTable(fit2,number=100000)#
#
write.table(genelist,file="genelist.txt", row.names=FALSE, sep="\t")#
#
dev.off()
